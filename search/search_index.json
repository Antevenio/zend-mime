{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"zend-mime Repository abandoned 2019-12-31 This repository has moved to laminas/laminas-mime . Zend\\Mime is a support class for handling multipart MIME messages. It is used by Zend\\Mail and Zend\\Mime\\Message and may be used by applications requiring MIME support. Installation Run the following to install this library: $ composer require zendframework/zend-mime Documentation Browse the documentation online at https://docs.zendframework.com/zend-mime/ Support Issues Chat Forum","title":"Home"},{"location":"#zend-mime","text":"","title":"zend-mime"},{"location":"#repository-abandoned-2019-12-31","text":"This repository has moved to laminas/laminas-mime . Zend\\Mime is a support class for handling multipart MIME messages. It is used by Zend\\Mail and Zend\\Mime\\Message and may be used by applications requiring MIME support.","title":"Repository abandoned 2019-12-31"},{"location":"#installation","text":"Run the following to install this library: $ composer require zendframework/zend-mime","title":"Installation"},{"location":"#documentation","text":"Browse the documentation online at https://docs.zendframework.com/zend-mime/","title":"Documentation"},{"location":"#support","text":"Issues Chat Forum","title":"Support"},{"location":"intro/","text":"Introduction Zend\\Mime\\Mime is a support class for handling multipart MIME messages; zend-mail relies on it for both parsing and creating multipart messages. Zend\\Mime\\Message can also be consumed by applications requiring general MIME support. Static Methods and Constants Zend\\Mime\\Mime provides a set of static helper methods to work with MIME: Zend\\Mime\\Mime::isPrintable() : Returns TRUE if the given string contains no unprintable characters, FALSE otherwise. Zend\\Mime\\Mime::encode() : Encodes a string with the specified encoding. Zend\\Mime\\Mime::encodeBase64() : Encodes a string into base64 encoding. Zend\\Mime\\Mime::encodeQuotedPrintable() : Encodes a string with the quoted-printable mechanism. Zend\\Mime\\Mime::encodeBase64Header() : Encodes a string into base64 encoding for Mail Headers. Zend\\Mime\\Mime::encodeQuotedPrintableHeader() : Encodes a string with the quoted-printable mechanism for Mail Headers. Zend\\Mime\\Mime::mimeDetectCharset() : detects if a string is encoded as ASCII, Base64, or quoted-printable. Zend\\Mime\\Mime defines a set of constants commonly used with MIME messages: Zend\\Mime\\Mime::TYPE_OCTETSTREAM : 'application/octet-stream' Zend\\Mime\\Mime::TYPE_TEXT : 'text/plain' Zend\\Mime\\Mime::TYPE_HTML : 'text/html' Zend\\Mime\\Mime::ENCODING_7BIT : '7bit' Zend\\Mime\\Mime::ENCODING_8BIT : '8bit' Zend\\Mime\\Mime::ENCODING_QUOTEDPRINTABLE : 'quoted-printable' Zend\\Mime\\Mime::ENCODING_BASE64 : 'base64' Zend\\Mime\\Mime::DISPOSITION_ATTACHMENT : 'attachment' Zend\\Mime\\Mime::DISPOSITION_INLINE : 'inline' Zend\\Mime\\Mime::MULTIPART_ALTERNATIVE : 'multipart/alternative' Zend\\Mime\\Mime::MULTIPART_MIXED : 'multipart/mixed' Zend\\Mime\\Mime::MULTIPART_RELATED : 'multipart/related' Instantiating Zend\\Mime When instantiating a Zend\\Mime\\Mime object, a MIME boundary is stored that is used for all instance calls. If the constructor is called with a string parameter, this value is used as the MIME boundary; if not, a random MIME boundary is generated. A Zend\\Mime\\Mime object has the following methods: boundary() : Returns the MIME boundary string. boundaryLine() : Returns the complete MIME boundary line. mimeEnd() : Returns the complete MIME end boundary line.","title":"Introduction"},{"location":"intro/#introduction","text":"Zend\\Mime\\Mime is a support class for handling multipart MIME messages; zend-mail relies on it for both parsing and creating multipart messages. Zend\\Mime\\Message can also be consumed by applications requiring general MIME support.","title":"Introduction"},{"location":"intro/#static-methods-and-constants","text":"Zend\\Mime\\Mime provides a set of static helper methods to work with MIME: Zend\\Mime\\Mime::isPrintable() : Returns TRUE if the given string contains no unprintable characters, FALSE otherwise. Zend\\Mime\\Mime::encode() : Encodes a string with the specified encoding. Zend\\Mime\\Mime::encodeBase64() : Encodes a string into base64 encoding. Zend\\Mime\\Mime::encodeQuotedPrintable() : Encodes a string with the quoted-printable mechanism. Zend\\Mime\\Mime::encodeBase64Header() : Encodes a string into base64 encoding for Mail Headers. Zend\\Mime\\Mime::encodeQuotedPrintableHeader() : Encodes a string with the quoted-printable mechanism for Mail Headers. Zend\\Mime\\Mime::mimeDetectCharset() : detects if a string is encoded as ASCII, Base64, or quoted-printable. Zend\\Mime\\Mime defines a set of constants commonly used with MIME messages: Zend\\Mime\\Mime::TYPE_OCTETSTREAM : 'application/octet-stream' Zend\\Mime\\Mime::TYPE_TEXT : 'text/plain' Zend\\Mime\\Mime::TYPE_HTML : 'text/html' Zend\\Mime\\Mime::ENCODING_7BIT : '7bit' Zend\\Mime\\Mime::ENCODING_8BIT : '8bit' Zend\\Mime\\Mime::ENCODING_QUOTEDPRINTABLE : 'quoted-printable' Zend\\Mime\\Mime::ENCODING_BASE64 : 'base64' Zend\\Mime\\Mime::DISPOSITION_ATTACHMENT : 'attachment' Zend\\Mime\\Mime::DISPOSITION_INLINE : 'inline' Zend\\Mime\\Mime::MULTIPART_ALTERNATIVE : 'multipart/alternative' Zend\\Mime\\Mime::MULTIPART_MIXED : 'multipart/mixed' Zend\\Mime\\Mime::MULTIPART_RELATED : 'multipart/related'","title":"Static Methods and Constants"},{"location":"intro/#instantiating-zend92mime","text":"When instantiating a Zend\\Mime\\Mime object, a MIME boundary is stored that is used for all instance calls. If the constructor is called with a string parameter, this value is used as the MIME boundary; if not, a random MIME boundary is generated. A Zend\\Mime\\Mime object has the following methods: boundary() : Returns the MIME boundary string. boundaryLine() : Returns the complete MIME boundary line. mimeEnd() : Returns the complete MIME end boundary line.","title":"Instantiating Zend\\Mime"},{"location":"message/","text":"Zend\\Mime\\Message Zend\\Mime\\Message represents a MIME compliant message that can contain one or more separate Parts (represented as Zend\\Mime\\Part instances). Encoding and boundary handling are handled transparently by the class. Message instances can also be generated from MIME strings. Instantiation There is no explicit constructor for Zend\\Mime\\Message . Adding MIME Parts Zend\\Mime\\Part instances can be added to a given Message instance by calling ->addPart($part) An array with all Part instances in the Message is returned from the method getParts() . The Part instances can then be modified on retrieveal, as they are stored in the array as references. If parts are added to the array or the sequence is changed, the array needs to be passed back to the Message instance by calling setParts($partsArray) . The function isMultiPart() will return TRUE if more than one part is registered with the Message instance; when true, the instance will generate a multipart MIME message. Boundary handling Zend\\Mime\\Message usually creates and uses its own Zend\\Mime\\Mime instance to generate a boundary. If you need to define the boundary or want to change the behaviour of the Mime instance used by Message , you can create the Mime instance yourself and register it with your Message using the setMime() method; this is an atypical occurrence. getMime() returns the Mime instance to use when rendering the message via generateMessage() . generateMessage() renders the Message content to a string. Parsing a string to create a Zend\\Mime\\Message object Zend\\Mime\\Message defines a static factory for parsing MIME-compliant message strings and returning a Zend\\Mime\\Message instance: $message = Zend\\Mime\\Message::createFromMessage($string, $boundary); As of version 2.6.1, You may also parse a single-part message by omitting the $boundary argument: $message = Zend\\Mime\\Message::createFromMessage($string); Available methods Zend\\Mime\\Message contains the following methods: getParts : Get the all Zend\\Mime\\Part s in the message. setParts($parts) : Set the array of Zend\\Mime\\Part s for the message. addPart(Zend\\Mime\\Part $part) : Append a new Zend\\Mime\\Part to the message. isMultiPart : Check if the message needs to be sent as a multipart MIME message. setMime(Zend\\Mime\\Mime $mime) : Set a custom Zend\\Mime\\Mime object for the message. getMime : Get the Zend\\Mime\\Mime object for the message. generateMessage($EOL = Zend\\Mime\\Mime::LINEEND) : Generate a MIME-compliant message from the current configuration. getPartHeadersArray($partnum) : Get the headers of a given part as an array. getPartHeaders($partnum, $EOL = Zend\\Mime\\Mime::LINEEND) : Get the headers of a given part as a string. getPartContent($partnum, $EOL = Zend\\Mime\\Mime::LINEEND) : Get the encoded content of a given part as a string.","title":"Messages"},{"location":"message/#zend92mime92message","text":"Zend\\Mime\\Message represents a MIME compliant message that can contain one or more separate Parts (represented as Zend\\Mime\\Part instances). Encoding and boundary handling are handled transparently by the class. Message instances can also be generated from MIME strings.","title":"Zend\\Mime\\Message"},{"location":"message/#instantiation","text":"There is no explicit constructor for Zend\\Mime\\Message .","title":"Instantiation"},{"location":"message/#adding-mime-parts","text":"Zend\\Mime\\Part instances can be added to a given Message instance by calling ->addPart($part) An array with all Part instances in the Message is returned from the method getParts() . The Part instances can then be modified on retrieveal, as they are stored in the array as references. If parts are added to the array or the sequence is changed, the array needs to be passed back to the Message instance by calling setParts($partsArray) . The function isMultiPart() will return TRUE if more than one part is registered with the Message instance; when true, the instance will generate a multipart MIME message.","title":"Adding MIME Parts"},{"location":"message/#boundary-handling","text":"Zend\\Mime\\Message usually creates and uses its own Zend\\Mime\\Mime instance to generate a boundary. If you need to define the boundary or want to change the behaviour of the Mime instance used by Message , you can create the Mime instance yourself and register it with your Message using the setMime() method; this is an atypical occurrence. getMime() returns the Mime instance to use when rendering the message via generateMessage() . generateMessage() renders the Message content to a string.","title":"Boundary handling"},{"location":"message/#parsing-a-string-to-create-a-zend92mime92message-object","text":"Zend\\Mime\\Message defines a static factory for parsing MIME-compliant message strings and returning a Zend\\Mime\\Message instance: $message = Zend\\Mime\\Message::createFromMessage($string, $boundary); As of version 2.6.1, You may also parse a single-part message by omitting the $boundary argument: $message = Zend\\Mime\\Message::createFromMessage($string);","title":"Parsing a string to create a Zend\\Mime\\Message object"},{"location":"message/#available-methods","text":"Zend\\Mime\\Message contains the following methods: getParts : Get the all Zend\\Mime\\Part s in the message. setParts($parts) : Set the array of Zend\\Mime\\Part s for the message. addPart(Zend\\Mime\\Part $part) : Append a new Zend\\Mime\\Part to the message. isMultiPart : Check if the message needs to be sent as a multipart MIME message. setMime(Zend\\Mime\\Mime $mime) : Set a custom Zend\\Mime\\Mime object for the message. getMime : Get the Zend\\Mime\\Mime object for the message. generateMessage($EOL = Zend\\Mime\\Mime::LINEEND) : Generate a MIME-compliant message from the current configuration. getPartHeadersArray($partnum) : Get the headers of a given part as an array. getPartHeaders($partnum, $EOL = Zend\\Mime\\Mime::LINEEND) : Get the headers of a given part as a string. getPartContent($partnum, $EOL = Zend\\Mime\\Mime::LINEEND) : Get the encoded content of a given part as a string.","title":"Available methods"},{"location":"part/","text":"Zend\\Mime\\Part Zend\\Mime\\Part represents a single part of a MIME message. It contains the actual content of the message part, plus information about its encoding, content type, and original filename. Finally, it provides a method for generating a string from the stored data. Zend\\Mime\\Part objects can be added to Zend\\Mime\\Message instances to assemble a complete multipart message. Instantiation Zend\\Mime\\Part is instantiated with a string representing the message part's content. The type is assumed to be OCTET-STREAM, with an 8-bit encoding. After instantiating a Zend\\Mime\\Part , meta information can be set directly on its attributes: public $type = Zend\\Mime\\Mime::TYPE_OCTETSTREAM; public $encoding = Zend\\Mime\\Mime::ENCODING_8BIT; public $id; public $disposition; public $filename; public $description; public $charset; public $boundary; public $location; public $language; Methods for rendering the message part to a string getContent() returns the encoded content of the Zend\\Mime\\Part as a string using the encoding specified in the attribute $encoding . Valid values are Zend\\Mime\\Mime::ENCODING_* . Character set conversions are not performed. getHeaders() returns the MIME headers for the Part as generated from the information in the publicly accessible attributes. The attributes of the object need to be set correctly before this method is called. $charset has to be set to the actual charset of the content if it is a text type (text or HTML). $id may be set to identify a Content-ID for inline images in an HTML mail. $filename specifies the name of the file at the time of creation. $disposition defines if the file should be treated as an attachment or if it is used inside the (HTML) mail (inline). $description is only used for informational purposes. $boundary defines the string to use as a part boundary. $location can be used as resource URI that has relation to the content. $language defines the content language. Available methods A Zend\\Mime\\Part object has the following methods: isStream : Check if this Part can be read as a stream. You can specify a PHP stream resource when creating the content in order to reduce CPU and/or memory overhead; if you do, this value will be toggled to true . getEncodedStream : If the Part was created with a stream, return a filtered stream for reading the content. Useful for large file attachments. getContent($EOL = Zend\\Mime\\Mime::LINEEND) : Get the content of the current Zend\\Mime\\Part in the given encoding. getRawContent : Get the raw, unencoded content for the current Part . getHeadersArray($EOL = Zend\\Mime\\Mime::LINEEND) : Create and return the array of headers for the current Part . getHeaders($EOL = Zend\\Mime\\Mime::LINEEND) : Return the headers for the current Part as a string.","title":"Parts"},{"location":"part/#zend92mime92part","text":"Zend\\Mime\\Part represents a single part of a MIME message. It contains the actual content of the message part, plus information about its encoding, content type, and original filename. Finally, it provides a method for generating a string from the stored data. Zend\\Mime\\Part objects can be added to Zend\\Mime\\Message instances to assemble a complete multipart message.","title":"Zend\\Mime\\Part"},{"location":"part/#instantiation","text":"Zend\\Mime\\Part is instantiated with a string representing the message part's content. The type is assumed to be OCTET-STREAM, with an 8-bit encoding. After instantiating a Zend\\Mime\\Part , meta information can be set directly on its attributes: public $type = Zend\\Mime\\Mime::TYPE_OCTETSTREAM; public $encoding = Zend\\Mime\\Mime::ENCODING_8BIT; public $id; public $disposition; public $filename; public $description; public $charset; public $boundary; public $location; public $language;","title":"Instantiation"},{"location":"part/#methods-for-rendering-the-message-part-to-a-string","text":"getContent() returns the encoded content of the Zend\\Mime\\Part as a string using the encoding specified in the attribute $encoding . Valid values are Zend\\Mime\\Mime::ENCODING_* . Character set conversions are not performed. getHeaders() returns the MIME headers for the Part as generated from the information in the publicly accessible attributes. The attributes of the object need to be set correctly before this method is called. $charset has to be set to the actual charset of the content if it is a text type (text or HTML). $id may be set to identify a Content-ID for inline images in an HTML mail. $filename specifies the name of the file at the time of creation. $disposition defines if the file should be treated as an attachment or if it is used inside the (HTML) mail (inline). $description is only used for informational purposes. $boundary defines the string to use as a part boundary. $location can be used as resource URI that has relation to the content. $language defines the content language.","title":"Methods for rendering the message part to a string"},{"location":"part/#available-methods","text":"A Zend\\Mime\\Part object has the following methods: isStream : Check if this Part can be read as a stream. You can specify a PHP stream resource when creating the content in order to reduce CPU and/or memory overhead; if you do, this value will be toggled to true . getEncodedStream : If the Part was created with a stream, return a filtered stream for reading the content. Useful for large file attachments. getContent($EOL = Zend\\Mime\\Mime::LINEEND) : Get the content of the current Zend\\Mime\\Part in the given encoding. getRawContent : Get the raw, unencoded content for the current Part . getHeadersArray($EOL = Zend\\Mime\\Mime::LINEEND) : Create and return the array of headers for the current Part . getHeaders($EOL = Zend\\Mime\\Mime::LINEEND) : Return the headers for the current Part as a string.","title":"Available methods"}]}