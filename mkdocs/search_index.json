{
    "docs": [
        {
            "location": "/", 
            "text": "zend-mime\n\n\n\n\n\n\nZend\\Mime\n is a support class for handling multipart MIME messages. It is used\nby \nZend\\Mail\n and \nZend\\Mime\\Message\n and may be used by applications requiring\nMIME support.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-mime/issues\n\n\nDocumentation is at https://zendframework.github.io/zend-mime/", 
            "title": "Home"
        }, 
        {
            "location": "/#zend-mime", 
            "text": "Zend\\Mime  is a support class for handling multipart MIME messages. It is used\nby  Zend\\Mail  and  Zend\\Mime\\Message  and may be used by applications requiring\nMIME support.   File issues at https://github.com/zendframework/zend-mime/issues  Documentation is at https://zendframework.github.io/zend-mime/", 
            "title": "zend-mime"
        }, 
        {
            "location": "/intro/", 
            "text": "Introduction\n\n\nZend\\Mime\\Mime\n is a support class for handling multipart\n\nMIME\n messages;\n\nzend-mail\n relies on it for both\nparsing and creating multipart messages. \nZend\\Mime\\Message\n can\nalso be consumed by applications requiring general MIME support.\n\n\nStatic Methods and Constants\n\n\nZend\\Mime\\Mime\n provides a set of static helper methods to work with MIME:\n\n\n\n\nZend\\Mime\\Mime::isPrintable()\n: Returns \nTRUE\n if the given string contains\n  no unprintable characters, \nFALSE\n otherwise.\n\n\nZend\\Mime\\Mime::encode()\n: Encodes a string with the specified encoding.\n\n\nZend\\Mime\\Mime::encodeBase64()\n: Encodes a string into base64 encoding.\n\n\nZend\\Mime\\Mime::encodeQuotedPrintable()\n: Encodes a string with the\n  quoted-printable mechanism.\n\n\nZend\\Mime\\Mime::encodeBase64Header()\n: Encodes a string into base64 encoding\n  for Mail Headers.\n\n\nZend\\Mime\\Mime::encodeQuotedPrintableHeader()\n: Encodes a string with the\n  quoted-printable mechanism for Mail Headers.\n\n\nZend\\Mime\\Mime::mimeDetectCharset()\n: detects if a string is encoded as\n  ASCII, Base64, or quoted-printable.\n\n\n\n\nZend\\Mime\\Mime\n defines a set of constants commonly used with MIME messages:\n\n\n\n\nZend\\Mime\\Mime::TYPE_OCTETSTREAM\n: 'application/octet-stream'\n\n\nZend\\Mime\\Mime::TYPE_TEXT\n: 'text/plain'\n\n\nZend\\Mime\\Mime::TYPE_HTML\n: 'text/html'\n\n\nZend\\Mime\\Mime::ENCODING_7BIT\n: '7bit'\n\n\nZend\\Mime\\Mime::ENCODING_8BIT\n: '8bit'\n\n\nZend\\Mime\\Mime::ENCODING_QUOTEDPRINTABLE\n: 'quoted-printable'\n\n\nZend\\Mime\\Mime::ENCODING_BASE64\n: 'base64'\n\n\nZend\\Mime\\Mime::DISPOSITION_ATTACHMENT\n: 'attachment'\n\n\nZend\\Mime\\Mime::DISPOSITION_INLINE\n: 'inline'\n\n\nZend\\Mime\\Mime::MULTIPART_ALTERNATIVE\n: 'multipart/alternative'\n\n\nZend\\Mime\\Mime::MULTIPART_MIXED\n: 'multipart/mixed'\n\n\nZend\\Mime\\Mime::MULTIPART_RELATED\n: 'multipart/related'\n\n\n\n\nInstantiating Zend\\Mime\n\n\nWhen instantiating a \nZend\\Mime\\Mime\n object, a MIME boundary is stored that is\nused for all instance calls. If the constructor is called with a string\nparameter, this value is used as the MIME boundary; if not, a random MIME\nboundary is generated.\n\n\nA \nZend\\Mime\\Mime\n object has the following methods:\n\n\n\n\nboundary()\n: Returns the MIME boundary string.\n\n\nboundaryLine()\n: Returns the complete MIME boundary line.\n\n\nmimeEnd()\n: Returns the complete MIME end boundary line.", 
            "title": "Intro"
        }, 
        {
            "location": "/intro/#introduction", 
            "text": "Zend\\Mime\\Mime  is a support class for handling multipart MIME  messages; zend-mail  relies on it for both\nparsing and creating multipart messages.  Zend\\Mime\\Message  can\nalso be consumed by applications requiring general MIME support.", 
            "title": "Introduction"
        }, 
        {
            "location": "/intro/#static-methods-and-constants", 
            "text": "Zend\\Mime\\Mime  provides a set of static helper methods to work with MIME:   Zend\\Mime\\Mime::isPrintable() : Returns  TRUE  if the given string contains\n  no unprintable characters,  FALSE  otherwise.  Zend\\Mime\\Mime::encode() : Encodes a string with the specified encoding.  Zend\\Mime\\Mime::encodeBase64() : Encodes a string into base64 encoding.  Zend\\Mime\\Mime::encodeQuotedPrintable() : Encodes a string with the\n  quoted-printable mechanism.  Zend\\Mime\\Mime::encodeBase64Header() : Encodes a string into base64 encoding\n  for Mail Headers.  Zend\\Mime\\Mime::encodeQuotedPrintableHeader() : Encodes a string with the\n  quoted-printable mechanism for Mail Headers.  Zend\\Mime\\Mime::mimeDetectCharset() : detects if a string is encoded as\n  ASCII, Base64, or quoted-printable.   Zend\\Mime\\Mime  defines a set of constants commonly used with MIME messages:   Zend\\Mime\\Mime::TYPE_OCTETSTREAM : 'application/octet-stream'  Zend\\Mime\\Mime::TYPE_TEXT : 'text/plain'  Zend\\Mime\\Mime::TYPE_HTML : 'text/html'  Zend\\Mime\\Mime::ENCODING_7BIT : '7bit'  Zend\\Mime\\Mime::ENCODING_8BIT : '8bit'  Zend\\Mime\\Mime::ENCODING_QUOTEDPRINTABLE : 'quoted-printable'  Zend\\Mime\\Mime::ENCODING_BASE64 : 'base64'  Zend\\Mime\\Mime::DISPOSITION_ATTACHMENT : 'attachment'  Zend\\Mime\\Mime::DISPOSITION_INLINE : 'inline'  Zend\\Mime\\Mime::MULTIPART_ALTERNATIVE : 'multipart/alternative'  Zend\\Mime\\Mime::MULTIPART_MIXED : 'multipart/mixed'  Zend\\Mime\\Mime::MULTIPART_RELATED : 'multipart/related'", 
            "title": "Static Methods and Constants"
        }, 
        {
            "location": "/intro/#instantiating-zend92mime", 
            "text": "When instantiating a  Zend\\Mime\\Mime  object, a MIME boundary is stored that is\nused for all instance calls. If the constructor is called with a string\nparameter, this value is used as the MIME boundary; if not, a random MIME\nboundary is generated.  A  Zend\\Mime\\Mime  object has the following methods:   boundary() : Returns the MIME boundary string.  boundaryLine() : Returns the complete MIME boundary line.  mimeEnd() : Returns the complete MIME end boundary line.", 
            "title": "Instantiating Zend\\Mime"
        }, 
        {
            "location": "/message/", 
            "text": "Zend\\Mime\\Message\n\n\nZend\\Mime\\Message\n represents a MIME compliant message that can contain one or\nmore separate Parts (represented as \nZend\\Mime\\Part\n instances).\nEncoding and boundary handling are handled transparently by the class.\n\nMessage\n instances can also be generated from MIME strings.\n\n\nInstantiation\n\n\nThere is no explicit constructor for \nZend\\Mime\\Message\n.\n\n\nAdding MIME Parts\n\n\nZend\\Mime\\Part\n instances can be added to a given \nMessage\n instance by\ncalling \n-\naddPart($part)\n\n\nAn array with all \nPart\n instances in the \nMessage\n is returned from\nthe method \ngetParts()\n. The \nPart\n instances can then be modified on\nretrieveal, as they are stored in the array as references. If parts are added\nto the array or the sequence is changed, the array needs to be passed back to\nthe \nMessage\n instance by calling \nsetParts($partsArray)\n.\n\n\nThe function \nisMultiPart()\n will return \nTRUE\n if more than one part is\nregistered with the \nMessage\n instance; when true, the instance will generate a\nmultipart MIME message.\n\n\nBoundary handling\n\n\nZend\\Mime\\Message\n usually creates and uses its own \nZend\\Mime\\Mime\n instance\nto generate a boundary.  If you need to define the boundary or want to change\nthe behaviour of the \nMime\n instance used by \nMessage\n, you can create the\n\nMime\n instance yourself and register it with your \nMessage\n using the\n\nsetMime()\n method; this is an atypical occurrence.\n\n\ngetMime()\n returns the \nMime\n instance to use when rendering the message via\n\ngenerateMessage()\n.\n\n\ngenerateMessage()\n renders the \nMessage\n content to a string.\n\n\nParsing a string to create a Zend\\Mime\\Message object\n\n\nZend\\Mime\\Message\n defines a static factory for parsing MIME-compliant message\nstrings and returning a \nZend\\Mime\\Message\n instance:\n\n\n$message = Zend\\Mime\\Message::createFromMessage($string, $boundary);\n\n\n\n\nAs of version 2.6.1, You may also parse a single-part message by omitting the\n\n$boundary\n argument:\n\n\n$message = Zend\\Mime\\Message::createFromMessage($string);\n\n\n\n\nAvailable methods\n\n\nZend\\Mime\\Message\n contains the following methods:\n\n\n\n\ngetParts\n: Get the all \nZend\\Mime\\Part\ns in the message.\n\n\nsetParts($parts)\n: Set the array of \nZend\\Mime\\Part\ns for the message.\n\n\naddPart(Zend\\Mime\\Part $part)\n: Append a new \nZend\\Mime\\Part\n to the\n  message.\n\n\nisMultiPart\n: Check if the message needs to be sent as a multipart MIME\n  message.\n\n\nsetMime(Zend\\Mime\\Mime $mime)\n: Set a custom \nZend\\Mime\\Mime\n object for the\n  message.\n\n\ngetMime\n: Get the \nZend\\Mime\\Mime\n object for the message.\n\n\ngenerateMessage($EOL = Zend\\Mime\\Mime::LINEEND)\n: Generate a MIME-compliant\n  message from the current configuration.\n\n\ngetPartHeadersArray($partnum)\n: Get the headers of a given part as an array.\n\n\ngetPartHeaders($partnum, $EOL = Zend\\Mime\\Mime::LINEEND)\n: Get the headers\n  of a given part as a string.\n\n\ngetPartContent($partnum, $EOL = Zend\\Mime\\Mime::LINEEND)\n: Get the encoded\n  content of a given part as a string.", 
            "title": "Messages"
        }, 
        {
            "location": "/message/#zend92mime92message", 
            "text": "Zend\\Mime\\Message  represents a MIME compliant message that can contain one or\nmore separate Parts (represented as  Zend\\Mime\\Part  instances).\nEncoding and boundary handling are handled transparently by the class. Message  instances can also be generated from MIME strings.", 
            "title": "Zend\\Mime\\Message"
        }, 
        {
            "location": "/message/#instantiation", 
            "text": "There is no explicit constructor for  Zend\\Mime\\Message .", 
            "title": "Instantiation"
        }, 
        {
            "location": "/message/#adding-mime-parts", 
            "text": "Zend\\Mime\\Part  instances can be added to a given  Message  instance by\ncalling  - addPart($part)  An array with all  Part  instances in the  Message  is returned from\nthe method  getParts() . The  Part  instances can then be modified on\nretrieveal, as they are stored in the array as references. If parts are added\nto the array or the sequence is changed, the array needs to be passed back to\nthe  Message  instance by calling  setParts($partsArray) .  The function  isMultiPart()  will return  TRUE  if more than one part is\nregistered with the  Message  instance; when true, the instance will generate a\nmultipart MIME message.", 
            "title": "Adding MIME Parts"
        }, 
        {
            "location": "/message/#boundary-handling", 
            "text": "Zend\\Mime\\Message  usually creates and uses its own  Zend\\Mime\\Mime  instance\nto generate a boundary.  If you need to define the boundary or want to change\nthe behaviour of the  Mime  instance used by  Message , you can create the Mime  instance yourself and register it with your  Message  using the setMime()  method; this is an atypical occurrence.  getMime()  returns the  Mime  instance to use when rendering the message via generateMessage() .  generateMessage()  renders the  Message  content to a string.", 
            "title": "Boundary handling"
        }, 
        {
            "location": "/message/#parsing-a-string-to-create-a-zend92mime92message-object", 
            "text": "Zend\\Mime\\Message  defines a static factory for parsing MIME-compliant message\nstrings and returning a  Zend\\Mime\\Message  instance:  $message = Zend\\Mime\\Message::createFromMessage($string, $boundary);  As of version 2.6.1, You may also parse a single-part message by omitting the $boundary  argument:  $message = Zend\\Mime\\Message::createFromMessage($string);", 
            "title": "Parsing a string to create a Zend\\Mime\\Message object"
        }, 
        {
            "location": "/message/#available-methods", 
            "text": "Zend\\Mime\\Message  contains the following methods:   getParts : Get the all  Zend\\Mime\\Part s in the message.  setParts($parts) : Set the array of  Zend\\Mime\\Part s for the message.  addPart(Zend\\Mime\\Part $part) : Append a new  Zend\\Mime\\Part  to the\n  message.  isMultiPart : Check if the message needs to be sent as a multipart MIME\n  message.  setMime(Zend\\Mime\\Mime $mime) : Set a custom  Zend\\Mime\\Mime  object for the\n  message.  getMime : Get the  Zend\\Mime\\Mime  object for the message.  generateMessage($EOL = Zend\\Mime\\Mime::LINEEND) : Generate a MIME-compliant\n  message from the current configuration.  getPartHeadersArray($partnum) : Get the headers of a given part as an array.  getPartHeaders($partnum, $EOL = Zend\\Mime\\Mime::LINEEND) : Get the headers\n  of a given part as a string.  getPartContent($partnum, $EOL = Zend\\Mime\\Mime::LINEEND) : Get the encoded\n  content of a given part as a string.", 
            "title": "Available methods"
        }, 
        {
            "location": "/part/", 
            "text": "Zend\\Mime\\Part\n\n\nZend\\Mime\\Part\n represents a single part of a MIME message. It contains the\nactual content of the message part, plus information about its encoding,\ncontent type, and original filename. Finally, it provides a method for\ngenerating a string from the stored data.\n\n\nZend\\Mime\\Part\n objects can be added to \nZend\\Mime\\Message\n\ninstances to assemble a complete multipart message.\n\n\nInstantiation\n\n\nZend\\Mime\\Part\n is instantiated with a string representing the message part's\ncontent. The type is assumed to be OCTET-STREAM, with an 8-bit encoding. After\ninstantiating a \nZend\\Mime\\Part\n, meta information can be set directly on its\nattributes:\n\n\npublic $type = Zend\\Mime\\Mime::TYPE_OCTETSTREAM;\npublic $encoding = Zend\\Mime\\Mime::ENCODING_8BIT;\npublic $id;\npublic $disposition;\npublic $filename;\npublic $description;\npublic $charset;\npublic $boundary;\npublic $location;\npublic $language;\n\n\n\n\nMethods for rendering the message part to a string\n\n\ngetContent()\n returns the encoded content of the \nZend\\Mime\\Part\n as a string\nusing the encoding specified in the attribute \n$encoding\n. Valid values are\n\nZend\\Mime\\Mime::ENCODING_*\n. Character set conversions are not performed.\n\n\ngetHeaders()\n returns the MIME headers for the \nPart\n as generated from the\ninformation in the publicly accessible attributes. The attributes of the object\nneed to be set correctly before this method is called.\n\n\n\n\n$charset\n has to be set to the actual charset of the content if it is a text\n  type (text or HTML).\n\n\n$id\n may be set to identify a Content-ID for inline images in an HTML mail.\n\n\n$filename\n specifies the name of the file at the time of creation.\n\n\n$disposition\n defines if the file should be treated as an attachment or if\n  it is used inside the (HTML) mail (inline).\n\n\n$description\n is only used for informational purposes.\n\n\n$boundary\n defines the string to use as a part boundary.\n\n\n$location\n can be used as resource URI that has relation to the content.\n\n\n$language\n defines the content language.\n\n\n\n\nAvailable methods\n\n\nA \nZend\\Mime\\Part\n object has the following methods:\n\n\n\n\nisStream\n: Check if this \nPart\n can be read as a stream. You can specify a\n  PHP stream resource when creating the content in order to reduce CPU and/or\n  memory overhead; if you do, this value will be toggled to \ntrue\n.\n\n\ngetEncodedStream\n: If the \nPart\n was created with a stream, return a\n  filtered stream for reading the content. Useful for large file attachments.\n\n\ngetContent($EOL = Zend\\Mime\\Mime::LINEEND)\n: Get the content of the current\n  \nZend\\Mime\\Part\n in the given encoding.\n\n\ngetRawContent\n: Get the raw, unencoded content for the current \nPart\n.\n\n\ngetHeadersArray($EOL = Zend\\Mime\\Mime::LINEEND)\n: Create and return the\n  array of headers for the current \nPart\n.\n\n\ngetHeaders($EOL = Zend\\Mime\\Mime::LINEEND)\n: Return the headers for the\n  current \nPart\n as a string.", 
            "title": "Parts"
        }, 
        {
            "location": "/part/#zend92mime92part", 
            "text": "Zend\\Mime\\Part  represents a single part of a MIME message. It contains the\nactual content of the message part, plus information about its encoding,\ncontent type, and original filename. Finally, it provides a method for\ngenerating a string from the stored data.  Zend\\Mime\\Part  objects can be added to  Zend\\Mime\\Message \ninstances to assemble a complete multipart message.", 
            "title": "Zend\\Mime\\Part"
        }, 
        {
            "location": "/part/#instantiation", 
            "text": "Zend\\Mime\\Part  is instantiated with a string representing the message part's\ncontent. The type is assumed to be OCTET-STREAM, with an 8-bit encoding. After\ninstantiating a  Zend\\Mime\\Part , meta information can be set directly on its\nattributes:  public $type = Zend\\Mime\\Mime::TYPE_OCTETSTREAM;\npublic $encoding = Zend\\Mime\\Mime::ENCODING_8BIT;\npublic $id;\npublic $disposition;\npublic $filename;\npublic $description;\npublic $charset;\npublic $boundary;\npublic $location;\npublic $language;", 
            "title": "Instantiation"
        }, 
        {
            "location": "/part/#methods-for-rendering-the-message-part-to-a-string", 
            "text": "getContent()  returns the encoded content of the  Zend\\Mime\\Part  as a string\nusing the encoding specified in the attribute  $encoding . Valid values are Zend\\Mime\\Mime::ENCODING_* . Character set conversions are not performed.  getHeaders()  returns the MIME headers for the  Part  as generated from the\ninformation in the publicly accessible attributes. The attributes of the object\nneed to be set correctly before this method is called.   $charset  has to be set to the actual charset of the content if it is a text\n  type (text or HTML).  $id  may be set to identify a Content-ID for inline images in an HTML mail.  $filename  specifies the name of the file at the time of creation.  $disposition  defines if the file should be treated as an attachment or if\n  it is used inside the (HTML) mail (inline).  $description  is only used for informational purposes.  $boundary  defines the string to use as a part boundary.  $location  can be used as resource URI that has relation to the content.  $language  defines the content language.", 
            "title": "Methods for rendering the message part to a string"
        }, 
        {
            "location": "/part/#available-methods", 
            "text": "A  Zend\\Mime\\Part  object has the following methods:   isStream : Check if this  Part  can be read as a stream. You can specify a\n  PHP stream resource when creating the content in order to reduce CPU and/or\n  memory overhead; if you do, this value will be toggled to  true .  getEncodedStream : If the  Part  was created with a stream, return a\n  filtered stream for reading the content. Useful for large file attachments.  getContent($EOL = Zend\\Mime\\Mime::LINEEND) : Get the content of the current\n   Zend\\Mime\\Part  in the given encoding.  getRawContent : Get the raw, unencoded content for the current  Part .  getHeadersArray($EOL = Zend\\Mime\\Mime::LINEEND) : Create and return the\n  array of headers for the current  Part .  getHeaders($EOL = Zend\\Mime\\Mime::LINEEND) : Return the headers for the\n  current  Part  as a string.", 
            "title": "Available methods"
        }
    ]
}